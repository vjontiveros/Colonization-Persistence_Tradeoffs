0.001, 0.01, column = "tax4", n=36)
rat.fam <- irregular_multiple_datasets(list(playa, salineta,
pinol, rebollon, rollico, abaja,
aalta, pito, camaron, muerte, pez, guallar),
list(1:15, 1:16, 1:10, 1:7, 1:9,
1:8, 1:8, 1:11, 1:11, 1:7, 1:10, 1:10),
0.001, 0.01, column = "tax5", n=36)
rat.gen <- irregular_multiple_datasets(list(playa, salineta,
pinol, rebollon, rollico, abaja,
aalta, pito, camaron, muerte, pez, guallar),
list(1:15, 1:16, 1:10, 1:7, 1:9,
1:8, 1:8, 1:11, 1:11, 1:7, 1:10, 1:10),
0.001, 0.01, column = "tax6", n=36)
rat.phy$p <- 1/rat.phy$e
rat.cla$p <- 1/rat.cla$e
rat.ord$p <- 1/rat.ord$e
rat.fam$p <- 1/rat.fam$e
rat.gen$p <- 1/rat.gen$e
# Core - satellite distinction --------------------------------------------
# First we calculate the max abundance in the whole dataset for each group
sum.abund <-
abund %>% select(-c(123:126)) %>% group_by(tax6) %>% summarise_all(sum)
rel.abund <- sum.abund
for(i in 2:123){
rel.abund[, i] <- sum.abund[, i]/sum(sum.abund[, i])
}
rel.abund <- sum.abund[, 2:123]/colSums(sum.abund[, 2:123])
max.abund <- data.frame(Group = rel.abund$tax6,
MA = apply(rel.abund[, 2:123], MARGIN = 1, FUN = max))
# And we join it with the rates of genera
rat.gen <- left_join(rat.gen, max.abund)
# Now we calculate the occupancies
occupancies <- rep(NA, nrow(rat.gen))
for(i in 1:nrow(rat.gen)){
temp <- NULL
for(n in 1:(length(lakes) - 1)){
temp2 <- get(lakes[n]) %>%
filter(tax6 == rat.gen[i, 1]) %>%
select(1:(ncol(get(lakes[n])) - 5)) %>% unlist() %>% unname()
temp <- c(temp, temp2)
}
occupancies[i] <- mean(temp)
}
rat.gen$Occ <- occupancies
# Separating core and satellite
chow <- rep(NA, 219)
pvalue <- rep(NA, 219)
for (i in 10:209){
chow[i] <- sctest(Occ ~ (MA) , type = "Chow", point = i, data = rat.gen, asymptotic = T)$statistic
pvalue[i] <- sctest(Occ ~ (MA) , type = "Chow", point = i, data = rat.gen, asymptotic = T)$p.value
}
plot(pvalue, type = "l")
which.max(chow)
# There is a structural change in position 113, there the relation between max.
# abundance and occupancy changes. But the structural change can be between
# positions 102 - 126. This delimitates the gray zone in figure 2.
sort(rat.gen$MA)[102]
sort(rat.gen$MA)[126]
fac <- factor(c(rep(1, 113), rep(2, 106)))[rank((rat.gen$MA))]
fmA <- lm(Occ ~ log10(MA), data = rat.gen[fac == 1, ])
fmB <- lm(Occ ~ log10(MA), data = rat.gen[fac == 2, ])
predA <- rep(NA, 44)
predB <- rep(NA, 44)
predA[fac == 1] <- predict(fmA)
predB[fac == 2] <- predict(fmB)
# We consider core those genera with an occupancy higher than the mean of the
# extremes of the two linear relationships.
((max(predA, na.rm = T) + min(predB, na.rm = T))/2) # .2626719
rat.gen$Core <- rat.gen$Occ > ((max(predA, na.rm = T) + min(predB, na.rm = T))/2)
# We calculate occupancy for families
occupancies2 <- rep(NA, nrow(rat.fam))
for(i in 1:nrow(rat.fam)){
temp <- NULL
for(n in 1:(length(lakes) - 1)){
temp2 <-
get(lakes[n]) %>%
filter(tax5 == rat.fam[i, 1]) %>%
select(1:(ncol(get(lakes[n])) - 5)) %>% unlist() %>% unname()
temp <- c(temp, temp2)
}
occupancies2[i] <- mean(temp)
}
rat.fam$Occ <- occupancies2
# Now we recycle the boundary of core groups for the families
rat.fam$Core <- rat.fam$Occ > ((max(predA, na.rm = T) + min(predB, na.rm = T))/2)
# Core species follow a log normal ----------------------------------------
rat.ma <- (unlist(rat.gen %>% filter(Core == T) %>% select(MA)))
rat.radlog <- vegan::rad.lognormal(rat.ma, family = Gamma)
f2_c1 <-
ggplot(rat.gen, aes(y = Occ, x = MA)) +
annotate("rect", xmin =0.01313351 , xmax = 0.02106352, ymin = -Inf, ymax = Inf,
alpha = .3 ) +
geom_point(aes(shape = Core, fill = Core), size = 2) +
scale_shape_manual(values = c(21, 22)) +
scale_fill_manual(values = c("#e4b925", "#f6e9bb")) +
scale_x_log10(labels = function(x) format(x, scientific = TRUE)) +
theme_bw() + ylab("Occupancy") +
annotation_logticks(sides = "b") +
theme(aspect.ratio = .618) +
geom_line(aes(y = predA), lty = 5, color = "#003D73", size = 1) +
geom_line(aes(y = predB), lty = 5, color = "#003D73", size = 1) +
xlab("Max. Abundance") +
theme(legend.position = "none") +
theme(panel.grid.minor = element_blank())
f2_c2 <-
ggplot() +
geom_point(aes(x = 1:88, y = c(rat.radlog$y)), size = 2, fill = "#EDD170", pch = 22) +
geom_line(aes(x = 1:88, y = c(rat.radlog$fitted.values)), color = "#003D73") +
scale_y_log10(labels = function(x) format(x, scientific = TRUE), limits = c(NA, 1)) +
theme_bw() +
xlab("Rank") +
theme(aspect.ratio = .618) +
annotation_logticks(sides = "l") +
ylab("Max. Abundance") +
theme(panel.grid.minor = element_blank())
f2_c1 <-
ggplot(rat.gen, aes(y = Occ, x = MA)) +
annotate("rect", xmin =0.01313351 , xmax = 0.02106352, ymin = -Inf, ymax = Inf,
alpha = .3 ) +
geom_point(aes(shape = Core, fill = Core), size = 2) +
scale_shape_manual(values = c(21, 22)) +
scale_fill_manual(values = c("#e4b925", "#f6e9bb")) +
scale_x_log10(labels = function(x) format(x, scientific = TRUE)) +
theme_bw() + ylab("Occupancy") +
annotation_logticks(sides = "b") +
theme(aspect.ratio = .618) +
geom_line(aes(y = predA), lty = 5, color = "#003D73", size = 1) +
geom_line(aes(y = predB), lty = 5, color = "#003D73", size = 1) +
xlab("Max. Abundance") +
theme(legend.position = "none") +
theme(panel.grid.minor = element_blank())
f2_c2 <-
ggplot() +
geom_point(aes(x = 1:88, y = c(rat.radlog$y)), size = 2, fill = "#EDD170", pch = 22) +
geom_line(aes(x = 1:88, y = c(rat.radlog$fitted.values)), color = "#003D73") +
scale_y_log10(labels = function(x) format(x, scientific = TRUE), limits = c(NA, 1)) +
theme_bw() +
xlab("Rank") +
theme(aspect.ratio = .618) +
annotation_logticks(sides = "l") +
ylab("Max. Abundance") +
theme(panel.grid.minor = element_blank())
egg::ggarrange(f2_c1, f2_c2, ncol = 2)
png(filename = "monegros.png",  width = 20, height = 8, units = "cm", res = 400)
egg::ggarrange(f2_c1, f2_c2, ncol = 2)
dev.off()
View(bac.ab)
soil.gen$Group
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
length((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
length((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
colnames(soil.gen)
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(str_temp, strs[, 4])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
length((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
length((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
mean((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
mean((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
str_temp <- paste0(strs[, 1], strs[, 2])
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
str_temp
same
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
strs <- str_split(rat.fam$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
distance <- dist(log(rat.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
strs <- str_split(rat.fam$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(rat.fam[, c(2,10)]), upper = T, diag = T)
distance
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]], na.rm = T)
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
length((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
length((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
length((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
length((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
length((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
length((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
strs <- str_split(soil.fam$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(soil.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
strs <- str_split(soil.gen$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
colnames(soil.gen)
distance <- dist(log(soil.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
#Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(soil.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(soil.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
### Now with family
#Phylum level
strs <- str_split(soil.fam$Group, ";", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(soil.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
distance <- dist(log(soil.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(rat.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
distance <- dist(log(soil.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
lake.gen
#Genera
# At a phyla level
temp <- as.character(rat.gen$Group)
temp[3] <- "Actinobacteria_Actinobacteria_Frankiales_Sporichthyaceae_hgcI-clade"
temp[10] <- "Candidate-division-OD1_Other_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
colnames(lake.gen)
distance <- dist(log(lake.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
#Genera
# At a phyla level
temp <- as.character(lake.gen$Group)
temp[3] <- "Actinobacteria_Actinobacteria_Frankiales_Sporichthyaceae_hgcI-clade"
temp[10] <- "Candidate-division-OD1_Other_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(lake.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
#Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(soil.gen[, c(2,11)]), upper = T, diag = T)
distance <- dist(log(lake.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.gen[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
### Now with family
#Phylum level
temp <- as.character(rat.fam$Group)
temp[10] <- "Candidate-division-OD1_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
### Now with family
#Phylum level
temp <- as.character(rat.fam$Group)
temp[10] <- "Candidate-division-OD1_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
### Now with family
#Phylum level
temp <- as.character(lake.fam$Group)
temp[10] <- "Candidate-division-OD1_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.fam[, c(2,11)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
#Genera
# At a phyla level
temp <- as.character(lake.gen$Group)
temp[3] <- "Actinobacteria_Actinobacteria_Frankiales_Sporichthyaceae_hgcI-clade"
temp[10] <- "Candidate-division-OD1_Other_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(lake.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
#Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.gen[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
### Now with family
#Phylum level
temp <- as.character(lake.fam$Group)
temp[10] <- "Candidate-division-OD1_Other_Other_Other"
temp[11] <- "Candidate-division-TM7_Other_Other_Other"
strs <- str_split(temp, "_", simplify = T)
same <- outer(strs[, 1], strs[, 1], FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Class level
str_temp <- paste0(strs[, 1], strs[, 2])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
# Order level
str_temp <- paste0(str_temp, strs[, 3])
same <- outer(str_temp, str_temp, FUN = "==")
distance <- dist(log(lake.fam[, c(2,10)]), upper = T, diag = T)
median((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]])
median((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])
kruskal.test(list(((as.matrix(distance)[upper.tri(same)])[same[upper.tri(same)]]),
((as.matrix(distance)[upper.tri(as.matrix(distance))])[!same[upper.tri(same)]])))
sm
sms
